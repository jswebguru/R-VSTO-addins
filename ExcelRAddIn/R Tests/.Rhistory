data(gala)
library(faraway)
gala
mdl <- lm (Species ~ Area + Elevation + Nearest + Scruz + Adjacent, data=gala)
summary(mdl)
x <- model.matrix (~ Area + Elevation + Nearest + Scruz + Adjacent, gala)
y <- gala$Species
# Linear Regression
library(tidyverse)
library(faraway)
gala
mdl <- lm (Species ~ Area + Elevation + Nearest + Scruz + Adjacent, data=gala)
summary(mdl)
x <- model.matrix (~ Area + Elevation + Nearest + Scruz + Adjacent, gala)
y <- gala$Species
xtxi <- solve(t(x) %*% x)
xtxi %*% t(x) %*% y
solve(crossprod(x, x), crossprod(x, y))
names(mdl)
md1s <- summary(mdl)
names(mdls)
mdls <- summary(mdl)
names(mdls)
# Galapagos Dataset
View(gala)
write.csv(gala, file='D:/Development/Projects/C#/Office/PredictiveAnalytics/Data/GalapagosData.csv')
fcast <- holt(airmiles)
autoplot(airmiles)
summary(fcast)
library(tidyverse)
library(fpp2)
library(dplyr)
library(zoo)
library(plotrix)
#create data frame
df <- data.frame(day=c(1:27),
sales=c(855.0, 847.0, 1000.0,
635.0, 346.0, 2146.0,
1328.0, 1322.0, 3124.0,
1012.0, 1280.0, 2435.0,
1016.0, 3465.0, 1107.0,
1172.0, 3432.0, 836.0,
142.0, 345.0, 2603.0,
739.0, 716.0, 880.0,
1008.0, 112.0, 361.0 ))
#view data frame
df
plot(df$sales)
autoplot(df$sales)
df$ma3 = ma(df$sales, order=3)
plot(df$ma3)
lines(df$ma3,col="red")
plot(df$sales)
View(df)
df$ma3 = ma(df$sales, order=3, centre = FALSE)
#view data frame
df
#calculate 3-day rolling average
df = df %>%
mutate(ma3 = rollmean(sales, k=3, fill=NA, align='right'))
df
se <- function(x) sd(x)/sqrt(length(x))
se(df$ma3[3:27])
std.error(df$ma3[3:27])
plot(df$sales)
df$ma3b = ma(df$sales, order=3, centre = FALSE)
plot(df$ma3b)
lines(df$ma3b,col="red")
library(tidyverse)
library(fpp2)
library(dplyr)
library(zoo)
library(plotrix)
#create data frame
df <- data.frame(day=c(1:27),
sales=c(855.0, 847.0, 1000.0,
635.0, 346.0, 2146.0,
1328.0, 1322.0, 3124.0,
1012.0, 1280.0, 2435.0,
1016.0, 3465.0, 1107.0,
1172.0, 3432.0, 836.0,
142.0, 345.0, 2603.0,
739.0, 716.0, 880.0,
1008.0, 112.0, 361.0 ))
#df$ma3b = ma(df$sales, order=3, centre = FALSE)
ma(df$sales, order=3, centre = FALSE)
df$ma3b = ma(df$sales, order=3, centre = FALSE)
summary(df$ma3b)
names(summary(df$ma3b))
names(summary)
s = summary(df$ma3b)
s
dfresult = as.data.frame.numeric(df$ma3b)
View(dfresult)
dfresult = as.data.frame.numeric(summary(df$ma3b))
View(dfresult)
dfresult
library(tidyverse)
library(fpp2)     # loads 'forecast'
WWWusage %>% forecast %>% plot
fit <- ets(window(WWWusage, end=60))
fc <- forecast(WWWusage, model=fit)
View(WWWusage)
WWWusage
View(fc)
w = WWWusage
as.data.frame(w)
autoplot(w)
View(fit)
fit <- ets(WWWusage)
# fit <- ets(window(WWWusage, end=60))
fc <- forecast(WWWusage, model=fit)
autoplot(fit)
autoplot(fc)
View(fit)
fit
accuracy(fit)
summary(fit)
View(fc)
fc
fc <- forecast(WWWusage)
fc
summary(fc)
library(tidyverse)
library(fpp2)     # loads 'forecast'
fit <- ets(WWWusage)
View(fit)
ets
ETS1 = ets(WWWUsage, damped = TRUE, alpha = NULL, beta = NULL, gamma = NULL, phi = NULL, additive.only = FALSE, lambda = "auto", biasadj = FALSE, opt.crit = "lik", nmse = 3, bounds = "both", ic = "aic", restrict = FALSE, allow.multiplicative.trend = FALSE, use.initial.values = FALSE)
library(tidyverse)
library(fpp2)     # loads 'forecast'
ETS1 = ets(WWWusage, damped = TRUE, alpha = NULL, beta = NULL, gamma = NULL, phi = NULL, additive.only = FALSE, lambda = "auto", biasadj = FALSE, opt.crit = "lik", nmse = 3, bounds = "both", ic = "aic", restrict = FALSE, allow.multiplicative.trend = FALSE, use.initial.values = FALSE)
ETS1
library(tidyverse)
library(fpp2)     # loads 'forecast'
ETS1 = ets(WWWusage, damped = TRUE, additive.only = FALSE, lambda = "auto", biasadj = FALSE,
opt.crit = "lik", nmse = 3, bounds = "both", ic = "aic", restrict = FALSE,
allow.multiplicative.trend = FALSE, use.initial.values = FALSE)
ETS1
fit <- ets(WWWusage)
# fit <- ets(window(WWWusage, end=60))
fc <- forecast(WWWusage, model=fit)
autoplot(fc)
fc
summary(fc)
View(fc)
library(tidyverse)
library(fpp2)     # loads 'forecast'
library(ggplot2)
WWWusage %>%
Arima(order=c(3,1,0)) %>%
forecast(h=20) %>%
autoplot
# Fit model to first few years of AirPassengers data
air.model <- Arima(window(AirPassengers,end=1956+11/12),order=c(0,1,1),
seasonal=list(order=c(0,1,1),period=12),lambda=0)
plot(forecast(air.model,h=48))
lines(AirPassengers)
# Apply fitted model to later data
air.model2 <- Arima(window(AirPassengers,start=1957),model=air.model)
# Forecast accuracy measures on the log scale.
# in-sample one-step forecasts.
accuracy(air.model)
# out-of-sample one-step forecasts.
accuracy(air.model2)
# out-of-sample multi-step forecasts
accuracy(forecast(air.model,h=48,lambda=NULL),
log(window(AirPassengers,start=1957)))
View(air.model)
air.model
View(air.model)
# Fit model to first few years of AirPassengers data
#air.model <- Arima(window(AirPassengers,end=1956+11/12),order=c(0,1,1),
#                   seasonal=list(order=c(0,1,1),period=12),lambda=0)
air.model <- Arima(AirPassengers,lambda=0)
air.model
Order = c(0,1,1)
# Fit model to first few years of AirPassengers data
#air.model <- Arima(window(AirPassengers,end=1956+11/12),order=c(0,1,1),
#                   seasonal=list(order=c(0,1,1),period=12),lambda=0)
air.model <- Arima(AirPassengers,order=Order,lambda=0)
air.model
fc = forecast(air.model,h=48)
fc
library(tidyverse)
library(fpp2)     # loads 'forecast'
library(ggplot2)
# Fit model to first few years of AirPassengers data
#air.model <- Arima(window(AirPassengers,end=1956+11/12),order=c(0,1,1),
#                   seasonal=list(order=c(0,1,1),period=12),lambda=0)
air.model <- Arima(AirPassengers,order=Order,lambda=0)
air.model
plot(forecast(air.model,h=48))
fc = forecast(air.model,h=48)
fc
air.model <- Arima(AirPassengers,order=c(0,1,1),lambda=0)
air.model
fc = forecast(air.model,h=48)
plot(fc)
lines(AirPassengers)
fc
fc = forecast(AirPassengers, air.model,h=48)
fc = forecast(AirPassengers, model = air.model, h=48)
plot(fc)
lines(AirPassengers)
fc
fc = forecast(h=48)
fc = forecast(object = air.model, h=48)
plot(fc)
fc
library(tidyverse)
library(fpp2)     # loads 'forecast'
library(ggplot2)
WWWusage %>% Arima(order=c(3,1,0)) %>% forecast(h=20) %>% autoplot
fit <- ets(window(WWWusage, end=60))
fit
fc <- forecast(WWWusage, model=fit)
fc
forecast
fit <- ets(window(WWWusage, end=60))
fit
fc <- forecast(WWWusage, model=fit)
View(fc)
library(tidyverse)
library(fpp2)     # loads 'forecast'
nile.fcast <- meanf(Nile, h=10)
plot(nile.fcast)
gold.fcast <- rwf(gold[1:60], h=50)
plot(gold.fcast)
plot(naive(gold,h=50),include=200)
plot(snaive(wineind))
fcast <- splinef(uspop,h=5)
plot(fcast)
summary(fcast)
nile.fcast <- thetaf(Nile)
plot(nile.fcast)
y <- rpois(20,lambda=.3)
fcast <- croston(y)
plot(fcast)
y <- rpois(20,lambda=.3)
fcast <- croston(y)
plot(fcast)
trees <- window(treering, start = 0)
(fit <- StructTS(trees, type = "level"))
plot(trees)
lines(fitted(fit), col = "green")
tsdiag(fit)
(fit <- StructTS(log10(UKgas), type = "BSM"))
par(mfrow = c(4, 1)) # to give appropriate aspect ratio for next plot.
plot(log10(UKgas))
plot(cbind(fitted(fit), resids=resid(fit)), main = "UK gas consumption")
## keep some parameters fixed; trace optimizer:
StructTS(log10(UKgas), type = "BSM", fixed = c(0.1,0.001,NA,NA),
optim.control = list(trace = TRUE))
library(tidyverse)
library(fpp2)     # loads 'forecast'
plot(wineind)
sm <- ma(wineind,order=12)
lines(sm,col="red")
sm
nile.fcast <- meanf(Nile, h=10)
nile.fcast
gold.fcast <- rwf(gold[1:60], h=50)
plot(gold.fcast)
gold.fcast
fcast <- splinef(uspop,h=5)
fcast
summary(fcast)
nile.fcast <- thetaf(Nile)
nile.fcast
plot(nile.fcast)
m1 = hw(austourists, h=10)
m1
View(m1)
austourists
library(tidyverse)
library(fpp2)     # loads 'forecast'
austourists
frequency(austourists)
class(austourists)
typeof(austourists)
m1 = hw(austourists, h=10)
m1
library(tidyverse)
library(faraway)
# Model
mdl <- lm (Species ~ Area + Elevation + Nearest + Scruz + Adjacent, data=gala)
summary(mdl)
library(tidyverse)
library(faraway)
# Galapagos Dataset
View(gala)
# Model
mdl <- lm (Species ~ Area + Elevation + Nearest + Scruz + Adjacent, data=gala)
summary(mdl)
summary(mdl$model)
mdl
mdl$model
as.data.frame(mdl$model)
# Model
mdl <- lm (Species ~ Area + Elevation + Nearest + Scruz + Adjacent, data=gala)
mdl
summary(mdl)
View(mdl)
library(tidyverse)
library(faraway)
# Model
mdl <- lm (Species ~ Area + Elevation + Nearest + Scruz + Adjacent, data=gala)
mdl
summary(mdl)
anova(mdl)
aov(mdl)
library(tidyverse)
library(forecast)
library(pkgload)
Functions = names(pkg_env("forecast"))
as.data.frame(Functions)
args(forecast.ets)
l_args = as.list(args(forecast.ets))
names(l_args)
names(as.list(args(base.window)))
names(as.list(args(window)))
names(as.list(args(frequency)))
names(as.list(args(lm)))
names(as.list(args(hw)))
names(as.list(args(ma)))
View(l_args)
l_args
type(l_args[1])
class(l_args[2])
typeof(l_args[1])
class(l_args[2])
class(l_args[1])
names(l_args[1])
names(l_args$object)
typeof(l_args$object)
class(l_args$object)
typeof(l_args$level)
class(l_args$level)
l_args_df = as.data.frame(args(forecast.ets))
formals(forecast.ets)
f_args = as.pairlist(formals(forecast.ets))
f_args
l_args_df = as.data.frame(args(forecast.ets))
args(forecast.ets)
l_args = as.list(args(forecast.ets))
View(l_args)
names(l_args)
typeof(l_args)
class(l_args)
l_args = as.list(args(forecast.ets))
l_args
formals(forecast.ets)
f_args = as.pairlist(formals(forecast.ets))
f_args
v_args = as.vector(formals(forecast.ets))
v_args
as.data.frame(v_args)
v_args = as.vector(formals(forecast.ets), "pairlist")
v_args
alist(formals(forecast.ets))
ls = alist(formals(forecast.ets))
ls
ls = alist(v_args)
ls
formals.unlist(formals(forecast.ets))
unlist(formals(forecast.ets))
u = unlist(formals(forecast.ets))
u
View(u)
library(tidyverse)
library(forecast)
library(pkgload)
args(forecast.ets)
formals(forecast.ets)
formals(forecast.ets)
v_args = as.vector(formals(forecast.ets), "pairlist")
v_args
names(as.list(args(hw)))
names(as.list(args(ma)))
names(as.list(args(ets)))
names(as.list(args(forecast.ets)))
names(as.pairlist(args(forecast.ets)))
res = forecast.ets(object = WWWusage)
forecast.ets(object = WWWusage)
WWWusage
# WWWusage
forecast.ets(object = WWWusage)
# WWWusage
forecast.ets(object = 'WWWusage')
l_args
# WWWusage
forecast.ets('WWWusage')
# WWWusage
forecast.ets(WWWusage)
# WWWusage
ets(WWWusage)
# WWWusage
ets('WWWusage')
# Test ARIMA
library(tidyverse)
path = "D:/Development/Projects/C#/Office/Office365 AddIns/ExcelRAddIn/R Tests/avg_hits.csv"
data <- read.csv(path)
View(data)
hitsts<-ts(data)
library(forecast)
Arima(hitsts, order=c(1,0,0), method=("CSS"))
arima_model = Arima(hitsts, order=c(1,0,0), method=("CSS"))
summary(arima_model)
plot(arima_model)
arima.errors(arima_model)
autoplot(arima_model)
autoplot(arima_model$model)
arima_model = Arima(hitsts, order=c(1,0,0), method=("CSS"))
arima_model
summary(arima_model)
arima_model_book = arima(hitsts, order=c(1,0,0), method=("CSS"))
arima_model_book
predict(arima_model_book,n.ahead=3)
arima_model = Arima(hitsts, order=c(1,0,0), method=("CSS"))
arima_model
summary(arima_model)
predict(arima_model,n.ahead=3)
arima_model_book = arima(x = hitsts, order=c(1,0,0), method=("CSS"))
arima_model_book
path = "D:/Development/Projects/C#/Office/Office365 AddIns/ExcelRAddIn/R Tests/avg_hits.csv"
data <- read.csv(path)
hitsts<-ts(data)
arima_model_book = arima(x = hitsts, order=c(1,0,0), method=("CSS"))
arima_model_book
predict(arima_model_book,n.ahead=3)
arima_model = Arima(hitsts, order=c(1,0,0), method=("CSS"))
arima_model
summary(arima_model)
predict(arima_model,n.ahead=3)
# order=c(1,0,0)
arima_model = Arima(hitsts, order=c(0,1,1), method=("CSS"))
arima_model
summary(arima_model)
predict(arima_model,n.ahead=3)
# order=c(1,0,0)
arima_model_book = arima(x = hitsts, order=c(0,1,1), method=("CSS"))
arima_model_book
predict(arima_model_book,n.ahead=3)
arima_auto = auto.arima(hitsts)
arima_auto
path = "D:/Development/Projects/C#/Office/Office365 AddIns/ExcelRAddIn/R Tests/avg_hits.csv"
data <- read.csv(path)
hitsts<-ts(data)
# order=c(1,0,0)
arima_model_book = arima(x = hitsts, order=c(0,1,1), method=("CSS"))
arima_model_book
# order=c(1,0,0)
arima_model_book = arima(x = hitsts, order=c(1,0,0), method=("CSS"))
arima_model_book
arima_model$arma
table(arima_model$arma)
as.list(arima_model$arma)
as.data.frame(arima_model$arma)
data <- read.csv("data/purchases.csv")
data <- read.csv("purchases.csv")
table(purchase)
table(data)
table(data$Purchase)
library(mlogit)
install.packages("mlogit")
data$Purchase<-as.factor(data$Purchase)
Pchsdata<-mlogit.data(data, choice="Purchase", shape="wide")
Pchsdata<-mlogit(data, choice="Purchase", shape="wide")
library(mlogit)
Pchsdata<-mlogit.data(data, choice="Purchase", shape="wide")
mlogit.model<-mlogit(Purchase~1|Income+Age+Zip,data=Pchsdata,reflevel="1")
mlogit.model<-mlogit(Purchase~1|Income+Age+ZipCode,data=Pchsdata,reflevel="1")
summary(mlogit.model)
View(data)
logit_model = glm(Purchase~Income+Age+ZipCode, family=binomial(link='logit'), data = data)
summary(logit_model)
logit_model = glm(Purchase~1|Income+Age+ZipCode, family=binomial(link='logit'), data = data)
summary(logit_model)
anova(logit_model)
View(logit_model)
logit_model = glm(Purchase~Income+Age+ZipCode, family=binomial(link='logit'), data = data)
summary(logit_model)
logit_model = glm(Purchase~Income+Age+ZipCode, data = data)
summary(logit_model)
logit_model = glm(Purchase~Income+Age+ZipCode, data = data)
data <- read.csv("purchases.csv")
table(data$Purchase)
data$Purchase<-as.factor(data$Purchase)
Pchsdata<-mlogit.data(data, choice="Purchase", shape="wide")
mlogit.model<-mlogit(Purchase~1|Income+Age+ZipCode,data=Pchsdata,reflevel="1")
summary(mlogit.model)
logit_model = glm(Purchase~Income+Age+ZipCode, data = data)
logit_model = glm(Purchase~Income+Age+ZipCode, family=gaussian, data = data)
logit_model = glm(Purchase~Income+Age+ZipCode, family=binomial, data = data)
logit_model = glm(Purchase~Income+Age+ZipCode, family=binomial(link='logit'), data = data)
summary(logit_model)
install.packages("fontawesome")
library(fontawesome)
fontawesome::fa_png()
if (interactive()) {
# Create a Font Awesome SVG icon as a
# PNG file on disk
fa_png(name = "r-project")
}
install.packages("rsvg")
library(rsvg)
if (interactive()) {
# Create a Font Awesome SVG icon as a
# PNG file on disk
fa_png(name = "r-project")
}
